diff -up rdesktop-1.6.0/licence.c.jx rdesktop-1.6.0/licence.c
--- rdesktop-1.6.0/licence.c.jx	2007-01-09 02:24:44.000000000 -0500
+++ rdesktop-1.6.0/licence.c	2012-08-22 16:41:33.766260447 -0400
@@ -2,6 +2,7 @@
    rdesktop: A Remote Desktop Protocol client.
    RDP licensing negotiation
    Copyright (C) Matthew Chapman 1999-2007
+   Copyright (C) Thomas Uhle <thomas.uhle@mailbox.tu-dresden.de> 2011
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -23,6 +24,7 @@
 
 extern char g_username[64];
 extern char g_hostname[16];
+extern RD_BOOL g_use_rdp5;
 
 static uint8 g_licence_key[16];
 static uint8 g_licence_sign_key[16];
@@ -61,14 +63,14 @@ licence_present(uint8 * client_random, u
 {
 	uint32 sec_flags = SEC_LICENCE_NEG;
 	uint16 length =
-		16 + SEC_RANDOM_SIZE + SEC_MODULUS_SIZE + SEC_PADDING_SIZE +
+		24 + SEC_RANDOM_SIZE + SEC_MODULUS_SIZE + SEC_PADDING_SIZE +
 		licence_size + LICENCE_HWID_SIZE + LICENCE_SIGNATURE_SIZE;
 	STREAM s;
 
-	s = sec_init(sec_flags, length + 4);
+	s = sec_init(sec_flags, length + 2);
 
 	out_uint8(s, LICENCE_TAG_PRESENT);
-	out_uint8(s, 2);	/* version */
+	out_uint8(s, (g_use_rdp5? 3 : 2));	/* version */
 	out_uint16_le(s, length);
 
 	out_uint32_le(s, 1);
@@ -76,7 +78,7 @@ licence_present(uint8 * client_random, u
 	out_uint16_le(s, 0x0201);
 
 	out_uint8p(s, client_random, SEC_RANDOM_SIZE);
-	out_uint16(s, 0);
+	out_uint16_le(s, 2);
 	out_uint16_le(s, (SEC_MODULUS_SIZE + SEC_PADDING_SIZE));
 	out_uint8p(s, rsa_data, SEC_MODULUS_SIZE);
 	out_uint8s(s, SEC_PADDING_SIZE);
@@ -108,7 +110,7 @@ licence_send_request(uint8 * client_rand
 	s = sec_init(sec_flags, length + 2);
 
 	out_uint8(s, LICENCE_TAG_REQUEST);
-	out_uint8(s, 2);	/* version */
+	out_uint8(s, (g_use_rdp5? 3 : 2));	/* version */
 	out_uint16_le(s, length);
 
 	out_uint32_le(s, 1);
@@ -116,7 +118,7 @@ licence_send_request(uint8 * client_rand
 	out_uint16_le(s, 0xff01);
 
 	out_uint8p(s, client_random, SEC_RANDOM_SIZE);
-	out_uint16(s, 0);
+	out_uint16_le(s, 2);
 	out_uint16_le(s, (SEC_MODULUS_SIZE + SEC_PADDING_SIZE));
 	out_uint8p(s, rsa_data, SEC_MODULUS_SIZE);
 	out_uint8s(s, SEC_PADDING_SIZE);
@@ -164,11 +166,18 @@ licence_process_demand(STREAM s)
 		ssl_rc4_set_key(&crypt_key, g_licence_key, 16);
 		ssl_rc4_crypt(&crypt_key, hwid, hwid, sizeof(hwid));
 
+#if WITH_DEBUG
+		DEBUG(("Sending licensing PDU (message type 0x%02x)\n", LICENCE_TAG_PRESENT));
+#endif
 		licence_present(null_data, null_data, licence_data, licence_size, hwid, signature);
+
 		xfree(licence_data);
 		return;
 	}
 
+#if WITH_DEBUG
+	DEBUG(("Sending licensing PDU (message type 0x%02x)\n", LICENCE_TAG_REQUEST));
+#endif
 	licence_send_request(null_data, null_data, g_username, g_hostname);
 }
 
@@ -183,7 +192,7 @@ licence_send_authresp(uint8 * token, uin
 	s = sec_init(sec_flags, length + 2);
 
 	out_uint8(s, LICENCE_TAG_AUTHRESP);
-	out_uint8(s, 2);	/* version */
+	out_uint8(s, (g_use_rdp5? 3 : 2));	/* version */
 	out_uint16_le(s, length);
 
 	out_uint16_le(s, 1);
@@ -250,6 +259,9 @@ licence_process_authreq(STREAM s)
 	ssl_rc4_set_key(&crypt_key, g_licence_key, 16);
 	ssl_rc4_crypt(&crypt_key, hwid, crypt_hwid, LICENCE_HWID_SIZE);
 
+#if WITH_DEBUG
+	DEBUG(("Sending licensing PDU (message type 0x%02x)\n", LICENCE_TAG_AUTHRESP));
+#endif
 	licence_send_authresp(out_token, crypt_hwid, out_sig);
 }
 
@@ -301,6 +313,10 @@ licence_process(STREAM s)
 	in_uint8(s, tag);
 	in_uint8s(s, 3);	/* version, length */
 
+#if WITH_DEBUG
+	DEBUG(("Received licensing PDU (message type 0x%02x)\n", tag));
+#endif
+
 	switch (tag)
 	{
 		case LICENCE_TAG_DEMAND:
@@ -312,14 +328,14 @@ licence_process(STREAM s)
 			break;
 
 		case LICENCE_TAG_ISSUE:
+		case LICENCE_TAG_REISSUE:
 			licence_process_issue(s);
 			break;
 
-		case LICENCE_TAG_REISSUE:
 		case LICENCE_TAG_RESULT:
 			break;
 
 		default:
-			unimpl("licence tag 0x%x\n", tag);
+			unimpl("licence tag 0x%02x\n", tag);
 	}
 }
